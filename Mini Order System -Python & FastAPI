main.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
from uuid import uuid4

app = FastAPI()
orders = {}

class Order(BaseModel):
    customer_name: str
    item: str
    quantity: int
    price_per_item: float

class OrderResponse(Order):
    id: str
    status: str

class OrderUpdate(BaseModel):
    status: str

class Summary(BaseModel):
    total_orders: int
    total_value: float

@app.post("/orders", response_model=OrderResponse)
def create_order(order: Order):
    order_id = str(uuid4())
    total_price = order.quantity * order.price_per_item
    orders[order_id] = {
        **order.dict(),
        "id": order_id,
        "status": "pending",
        "total_price": total_price
    }
    return orders[order_id]

@app.get("/orders", response_model=List[OrderResponse])
def list_orders():
    return list(orders.values())

@app.get("/orders/{order_id}", response_model=OrderResponse)
def get_order(order_id: str):
    if order_id not in orders:
        raise HTTPException(status_code=404, detail="Order not found")
    return orders[order_id]

@app.put("/orders/{order_id}", response_model=OrderResponse)
def update_order_status(order_id: str, update: OrderUpdate):
    if order_id not in orders:
        raise HTTPException(status_code=404, detail="Order not found")
    orders[order_id]["status"] = update.status
    return orders[order_id]

@app.get("/summary", response_model=Summary)
def get_summary():
    total_orders = len(orders)
    total_value = sum(order["total_price"] for order in orders.values())
    return {"total_orders": total_orders, "total_value": total_value}
